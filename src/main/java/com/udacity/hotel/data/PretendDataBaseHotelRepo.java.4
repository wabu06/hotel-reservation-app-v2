package com.udacity.hotel.data;


import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.lang.reflect.Type;
import java.util.*;
import java.util.prefs.Preferences;

import java.io.InputStream;

//import java.util.stream.Collectors;

//import java.util.function.Function;

import com.udacity.hotel.models.*;


public class PretendDataBaseHotelRepo implements HotelRepository
{
	Random rng;

	Map<String, Customer> customers;
	
	Map<String, Room> rooms;
	
	final static PretendDataBaseHotelRepo instance = new PretendDataBaseHotelRepo();
	
	public static PretendDataBaseHotelRepo getInstance() { return instance; }

  //private static final Preferences repo_prefs = Preferences.userNodeForPackage(PretendDataBaseHotelRepo.class);
  private Preferences repo_prefs;
  private Gson gson; //used to serialize objects into JSON
  
  private PretendDataBaseHotelRepo()
  {
  	rng = new Random();
  	
  	repo_prefs = Preferences.userNodeForPackage(PretendDataBaseHotelRepo.class);
  	gson = new Gson();
  	
  	//GsonBuilder builder = new GsonBuilder();
  	//gson = builder.registerTypeAdapter(IRoom.class, new IRoomDeserializer()).create();
  	
  	String customerString = repo_prefs.get("CUSTOMERS", null);
  	
    if(customerString == null)
    	customers = new HashMap<String, Customer>();
    else
    {
    	Type type = new TypeToken< Map<String, Customer> >() {}.getType();
      customers = gson.fromJson(customerString, type);
    }
  	
    String roomString = repo_prefs.get("ROOMS", null);
    
    if( (roomString == null) )
    	createRooms();
    else
    {
    	Type roomType = new TypeToken< Map<String, Room> >() {}.getType();
      rooms = gson.fromJson(roomString, roomType);
      addReservations();
    }
  }
  
  private void addReservations()
  {
  	Type reserveType = new TypeToken< List<Reservation> >() {}.getType();
  	
  	for(Room rm: rooms.values())
  	{
 			String reserveString = repo_prefs.get(rm.getRoomNumber(), null);
  		
  		if(reserveString == null)
  			rm.setReservations( new ArrayList<Reservation> () );
  		else
  			rm.setReservations( gson.fromJson(reserveString, reserveType)  );
  	}
  }
  
  private RoomType getRoomType()
	{
		if(rng.nextBoolean())
			return RoomType.DOUBLE;
		else
			return RoomType.SINGLE;
	}
		
	private void createRooms()
	{
		Properties props = new Properties();
		
		try (InputStream is = getClass().getClassLoader().getResourceAsStream("rooms.properties")) {
     	props.load(is);
    }
    	//catch (IOException ioe ) {
    catch (Exception exp ) {
       	//price.properties not found
     	System.exit(1);
    }
    	
    Integer rpf = Integer.parseInt( props.getProperty("rooms.per.floor") );
    Integer floors = Integer.parseInt( props.getProperty("floors") );
    	
    rooms = new HashMap<String, Room>();
    	
    for(int f = 2; f <= floors; f++)
    {
    	for(int r = 1; r <= rpf; r++)
    	{
    		String roomID = String.valueOf(100*f + r);
    			
    		RoomType type = getRoomType();
    			
    		rooms.put(roomID, new Room(roomID, type));
    	}
    }
    Map<String, Room> saved_rooms = new HashMap<>(rooms);
    
    saved_rooms.values().stream().forEach(rm -> rm.nullifyReservations());
    
    repo_prefs.put("ROOMS", gson.toJson(saved_rooms));
  }
  
  @Override
  public Map<String, Customer> updateCustomers(Map<String, Customer> new_customers)
  {
  	repo_prefs.put("CUSTOMERS", gson.toJson(new_customers));
  	return new_customers;
  }
  
  @Override
  public Map<String, Customer> getCustomers() {
 			return customers; 	
  }
  
  @Override
  public Map<String, Room> getRooms() {
  	return rooms;
  }
  
  @Override
  public void updateRooms(Map<String, Room> new_rooms)
  {
  	Map<String, Room> saved_rooms = new HashMap<>(new_rooms);
    
    saved_rooms.values().stream().forEach(rm -> rm.nullifyReservations());
    
    repo_prefs.put("ROOMS", gson.toJson(saved_rooms));
  }
  
  @Override
  public void updateReservations(Room room)
  {
  	List<Reservation> reservations = room.getReservations();
  	repo_prefs.put(room.getRoomNumber(), gson.toJson(reservations));
  }
 
}

